{"ast":null,"code":"var _jsxFileName = \"/Users/yardentsaraf/Desktop/TLC/src/components/pages/allVolunteeringPage/VolunteeringGrid.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { fetchVolunteering } from \"../../../store/volunteeringDataSlice\";\nimport { fetchAssociations } from \"../../../store/AssociationDataSlice\";\nimport { useAppDispatch } from \"../../../store/store\";\nimport \"./AllVolunteeringPage.scss\";\nimport SubmitButton from \"../../layout/button/SubmitButton\";\nimport VolunteeringPage from \"../volunteeringPage/VolunteeringPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VolunteeringGrid = _ref => {\n  _s();\n\n  let {\n    filter\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const {\n    volunteering\n  } = useSelector(state => state.volunteering);\n  useEffect(() => {\n    dispatch(fetchVolunteering());\n    dispatch(fetchAssociations());\n  }, []);\n  const [openVolunteeringCard, setOpenVolunteeringCard] = useState(false);\n  const [selectedVolunteering, setSelectedVolunteering] = useState({});\n\n  const openVolunteeringCardHandler = volunteer => {\n    setOpenVolunteeringCard(true);\n    setSelectedVolunteering(volunteer);\n  };\n\n  const passFilter = item => {\n    var _volunteering$filter$;\n\n    const foryouSuggestions = (_volunteering$filter$ = volunteering.filter(item => {\n      var _item$keywords$, _item$keywords$2;\n\n      const keywords = localStorage.getItem(\"keywords\");\n      const found = (item === null || item === void 0 ? void 0 : (_item$keywords$ = item.keywords[0]) === null || _item$keywords$ === void 0 ? void 0 : _item$keywords$.length) !== 0 ? (_item$keywords$2 = item.keywords[0]) === null || _item$keywords$2 === void 0 ? void 0 : _item$keywords$2.split(\",\") : \"\";\n      const foundResult = found === null || found === void 0 ? void 0 : found.some(r => (keywords === null || keywords === void 0 ? void 0 : keywords.split(\",\").indexOf(r)) >= 0);\n      return foundResult;\n    })[0]) === null || _volunteering$filter$ === void 0 ? void 0 : _volunteering$filter$.keywords;\n    const volunteeringDay = item.date.slice(0, 10);\n    const date = new Date();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const nextDay = date.getDate() + 1;\n    const today = date.getFullYear() + \"/\" + month + \"/\" + date.getDate();\n    const tommorrow = date.getFullYear() + \"/\" + month + \"/\" + nextDay;\n    let keywordIsEqual;\n    const isForYou = foryouSuggestions === null || foryouSuggestions === void 0 ? void 0 : foryouSuggestions.map(suggestion => {\n      item.keywords.map(keyword => {\n        if (suggestion === keyword) keywordIsEqual = true;else keywordIsEqual = false;\n      });\n      return keywordIsEqual;\n    });\n\n    switch (filter) {\n      case \"all\":\n        return true;\n\n      case \"today\":\n        if (today === volunteeringDay) return true;else return false;\n\n      case \"tommorrow\":\n        if (tommorrow === volunteeringDay) return true;else return false;\n\n      case \"foryou\":\n        if (isForYou[0]) return true;\n        return false;\n\n      default:\n        return true;\n    }\n  };\n\n  function formatDate(Idate) {\n    const date = new Date(Idate);\n    const currentMonth = date.getMonth();\n    const monthString = currentMonth >= 10 ? currentMonth : `0${currentMonth}`;\n    const currentDate = date.getDate(); //const dateString = currentDate >= 10 ? currentDate : `0${currentDate}`;\n\n    return `${currentDate}/${monthString}/${date.getFullYear()}`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [openVolunteeringCard && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"volunteering-container\",\n        onClick: () => setOpenVolunteeringCard(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-volunteering-page\",\n        onClick: () => setOpenVolunteeringCard(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VolunteeringPage, {\n        volunteering: selectedVolunteering\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      children: !openVolunteeringCard && volunteering.map(item => {\n        if (passFilter(item)) return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feed-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"volunteering-name\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"volunteering-date\",\n            children: formatDate(item.date) !== \"NaN/0NaN/NaN\" ? formatDate(item.date) : \"Unknown Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"address\",\n            children: item.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submit-volunteer-button\",\n            children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n              value: \"Sign up here\",\n              onClick: () => openVolunteeringCardHandler(item.name)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this)]\n        }, item.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VolunteeringGrid, \"LlBkCOAvj7Eh+aaETsVN8G/L0Os=\", false, function () {\n  return [useAppDispatch, useSelector];\n});\n\n_c = VolunteeringGrid;\nexport default VolunteeringGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"VolunteeringGrid\");","map":{"version":3,"sources":["/Users/yardentsaraf/Desktop/TLC/src/components/pages/allVolunteeringPage/VolunteeringGrid.tsx"],"names":["Fragment","useEffect","useState","useSelector","fetchVolunteering","fetchAssociations","useAppDispatch","SubmitButton","VolunteeringPage","VolunteeringGrid","filter","dispatch","volunteering","state","openVolunteeringCard","setOpenVolunteeringCard","selectedVolunteering","setSelectedVolunteering","openVolunteeringCardHandler","volunteer","passFilter","item","foryouSuggestions","keywords","localStorage","getItem","found","length","split","foundResult","some","r","indexOf","volunteeringDay","date","slice","Date","month","String","getMonth","padStart","nextDay","getDate","today","getFullYear","tommorrow","keywordIsEqual","isForYou","map","suggestion","keyword","formatDate","Idate","currentMonth","monthString","currentDate","name","address"],"mappings":"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","sourcesContent":["/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { fetchVolunteering } from \"../../../store/volunteeringDataSlice\";\r\nimport { fetchAssociations } from \"../../../store/AssociationDataSlice\";\r\nimport { useAppDispatch } from \"../../../store/store\";\r\nimport \"./AllVolunteeringPage.scss\";\r\nimport SubmitButton from \"../../layout/button/SubmitButton\";\r\nimport VolunteeringPage from \"../volunteeringPage/VolunteeringPage\";\r\n\r\nconst VolunteeringGrid = ({ filter }: any) => {\r\n  const dispatch = useAppDispatch();\r\n  const { volunteering } = useSelector((state: any) => state.volunteering);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchVolunteering());\r\n    dispatch(fetchAssociations());\r\n  }, []);\r\n\r\n  const [openVolunteeringCard, setOpenVolunteeringCard] = useState(false);\r\n  const [selectedVolunteering, setSelectedVolunteering] = useState({});\r\n\r\n  const openVolunteeringCardHandler = (volunteer: object) => {\r\n    setOpenVolunteeringCard(true);\r\n    setSelectedVolunteering(volunteer);\r\n  };\r\n\r\n  const passFilter = (item: any) => {\r\n    const foryouSuggestions: any = volunteering.filter((item: any) => {\r\n      const keywords: any = localStorage.getItem(\"keywords\");\r\n\r\n      const found: any =\r\n        item?.keywords[0]?.length !== 0 ? item.keywords[0]?.split(\",\") : \"\";\r\n      const foundResult = found?.some(\r\n        (r: any) => keywords?.split(\",\").indexOf(r) >= 0\r\n      );\r\n      return foundResult;\r\n    })[0]?.keywords;\r\n    const volunteeringDay: any = item.date.slice(0, 10);\r\n    const date = new Date();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const nextDay = date.getDate() + 1;\r\n    const today = date.getFullYear() + \"/\" + month + \"/\" + date.getDate();\r\n    const tommorrow = date.getFullYear() + \"/\" + month + \"/\" + nextDay;\r\n    let keywordIsEqual: boolean;\r\n    const isForYou = foryouSuggestions?.map((suggestion: any) => {\r\n      item.keywords.map((keyword: any) => {\r\n        if (suggestion === keyword) keywordIsEqual = true;\r\n        else keywordIsEqual = false;\r\n      });\r\n      return keywordIsEqual;\r\n    });\r\n\r\n    switch (filter) {\r\n      case \"all\":\r\n        return true;\r\n      case \"today\":\r\n        if (today === volunteeringDay) return true;\r\n        else return false;\r\n      case \"tommorrow\":\r\n        if (tommorrow === volunteeringDay) return true;\r\n        else return false;\r\n      case \"foryou\":\r\n        if (isForYou[0]) return true;\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  function formatDate(Idate: any) {\r\n    const date = new Date(Idate);\r\n    const currentMonth = date.getMonth();\r\n    const monthString = currentMonth >= 10 ? currentMonth : `0${currentMonth}`;\r\n    const currentDate = date.getDate();\r\n    //const dateString = currentDate >= 10 ? currentDate : `0${currentDate}`;\r\n    return `${currentDate}/${monthString}/${date.getFullYear()}`;\r\n\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {openVolunteeringCard && (\r\n        <Fragment>\r\n          <button\r\n            className=\"volunteering-container\"\r\n            onClick={() => setOpenVolunteeringCard(false)}\r\n          ></button>\r\n          <button\r\n            className=\"close-volunteering-page\"\r\n            onClick={() => setOpenVolunteeringCard(false)}\r\n          >\r\n            X\r\n          </button>\r\n          <br />\r\n          <VolunteeringPage\r\n            volunteering={selectedVolunteering}\r\n          ></VolunteeringPage>\r\n        </Fragment>\r\n      )}\r\n      <div className=\"feed\">\r\n        {!openVolunteeringCard &&\r\n          volunteering.map((item: any) => {\r\n            if (passFilter(item))\r\n              return (\r\n                <div className=\"feed-container\" key={item.name}>\r\n                  <span className=\"volunteering-name\">{item.name}</span>\r\n                  <span className=\"volunteering-date\">\r\n                    {formatDate(item.date) !== \"NaN/0NaN/NaN\"\r\n                      ? formatDate(item.date)\r\n                      : \"Unknown Date\"}\r\n                  </span>\r\n\r\n                  <span className=\"address\">{item.address}</span>\r\n                  <div className=\"submit-volunteer-button\">\r\n                    <SubmitButton\r\n                      value={\"Sign up here\"}\r\n                      onClick={() => openVolunteeringCardHandler(item.name)}\r\n                    ></SubmitButton>\r\n                  </div>\r\n                </div>\r\n              );\r\n          })}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default VolunteeringGrid;\r\n"]},"metadata":{},"sourceType":"module"}